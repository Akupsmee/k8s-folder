databaseChangeLog:
  - changeSet:
      id: 23.2.1
      author: i.akupuome
      changes:
        - sql:
            dbms: postgresql
            endDelimiter: ";"
            splitStatements: false
            sql: >
              CREATE OR REPLACE FUNCTION public.update_tbl_inquirysearch()
              RETURNS trigger
              LANGUAGE plpgsql
              AS $function$
              BEGIN
                IF (TG_OP = 'INSERT') THEN
                  INSERT INTO tbl_inquirysearch (id, expert_id, user_id, first_name, last_name, store_id, store_description, last_updated_at, subject, description, urgency_level, issue_type, status, created_at, categories, appointment, appointment_wish)
                  SELECT i.id, i.assignee, i.user_id, COALESCE(u.first_name, NULL), COALESCE(u.last_name, NULL), i.store_id, COALESCE(s.description, NULL), i.last_updated_at, i.subject, i.description, i.urgency_level, i.issue_type, i.status, i.created_at,
                  (SELECT STRING_AGG(cat.title::text, ',') FROM tbl_inquiries_categories_tbl_category_config cc LEFT JOIN tbl_category_config cat ON cc.category_id = cat.id WHERE cc.inquiry_id = NEW.id),
                  (SELECT STRING_AGG(a.appointment::text || ':::' || a.appointment_type::text, ',') FROM tbl_customer_appointments a WHERE a.inquiry_id = NEW.id),
                  (SELECT h.appointment_wish FROM tbl_history_entries h WHERE h.inquiry_id = NEW.id ORDER BY h.inquiry_id DESC LIMIT 1)
                  FROM tbl_inquiries i 
                  JOIN tbl_users u ON i.user_id = u.id 
                  left JOIN tbl_stores s ON i.store_id = s.id 
                  WHERE i.id = NEW.id;
                ELSIF (TG_OP = 'UPDATE') THEN
                  UPDATE tbl_inquirysearch 
                  SET expert_id = i.assignee, user_id = i.user_id, first_name = u.first_name, last_name = u.last_name, store_id = i.store_id, store_description = s.description, last_updated_at = i.last_updated_at, subject = i.subject, description = i.description, urgency_level = i.urgency_level, issue_type = i.issue_type, status = i.status, created_at = i.created_at, 
                  categories = (SELECT STRING_AGG(cat.title::text, ',') FROM tbl_inquiries_categories_tbl_category_config cc LEFT JOIN tbl_category_config cat ON cc.category_id = cat.id WHERE cc.inquiry_id = NEW.id AND tbl_inquirysearch.id = NEW.id),
                  appointment = (SELECT STRING_AGG(a.appointment::text || ':::' || a.appointment_type::text, ',') FROM tbl_customer_appointments a WHERE a.inquiry_id = NEW.id AND tbl_inquirysearch.id = NEW.id),
                  appointment_wish = (SELECT h.appointment_wish FROM tbl_history_entries h WHERE h.inquiry_id = NEW.id AND tbl_inquirysearch.id = NEW.id ORDER BY h.inquiry_id DESC LIMIT 1)
                  FROM tbl_inquiries i 
                  JOIN tbl_users u ON i.user_id = u.id 
                  LEFT JOIN tbl_stores s ON i.store_id = s.id 
                  WHERE i.id = NEW.id AND tbl_inquirysearch.id = NEW.id;
                ELSIF (TG_OP = 'DELETE') THEN
                  DELETE FROM tbl_inquirysearch WHERE id = OLD.id;
                END IF;
                RETURN NULL;
              END;
              $function$
